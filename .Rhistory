writeLines(modelstring, con = "Coll_BioMasse_Cut-hetVar-block.jags")
## list of data
lin.data <- list(
Biomasse = as.numeric(Biomasse),
Cutpartial = as.numeric(Cutpartial),
Cutclear = as.numeric(Cutclear),
CoupeNum = CoupeNum,
nsites = nsites,
Block = Block, nblocks = 4
)
str(lin.data)
# initial values of intercepts
inits <- function( ){
list(beta0 = rnorm(1),
beta.Cutpartial = rnorm(1),
beta.Cutclear = rnorm(1),
sigma = rlnorm(3),
alpha.block = rnorm(nblocks),
sigma.block = runif(1, 0, 10))
}
# output
params <- c("beta0",
"beta.Cutpartial",
"beta.Cutclear",
"sigma",
"pred", "res", "res.pearson", "sigma.block")
## MCMC settings
## chains
nc <- 5
## iterations
ni <- 100000
## burn-in
nb <- 50000
## thinning rate (save 1 obs per 5 iterations)
nt <- 5
library(jagsUI)
out.coll <- jags(data = lin.data,
inits = inits,
parameters = params,
model = "Coll_BioMasse_Cut-hetVar-block.jags",
n.thin = nt,
n.chains = nc,
n.burnin = nb,
n.iter = ni,
n.adapt = 10000)
print(out.coll, digits = 3)
out.coll$summary[c("beta0",
"beta.Cutpartial",
"beta.Cutclear",
"sigma[1]", "sigma[2]", "sigma[3]"),
c("mean", "sd", "2.5%", "97.5%", "Rhat")]
##Rhat
hist(out.coll$summary[, "Rhat"])
any(out.coll$summary[, "Rhat"] > 1.1)
##to view some diagnostics
library(mcmcplots)
mcmcplot(out.coll$samples)
##trace plots
jagsUI:::traceplot(out.coll, parameters = c("beta0","beta.Cutpartial",
"beta.Cutclear"))
jagsUI:::traceplot(out.coll, parameters = c("sigma[1]","sigma[2]","sigma[3]"))
##using coda package for additional diagnostics
library(coda)
##convert to mcmc.list( ) for coda
outmc <- mcmc.list(out.coll$samples[[1]],
out.coll$samples[[2]],
out.coll$samples[[3]],
out.coll$samples[[4]],
out.coll$samples[[5]])
##save summary in object
coda.out <- summary(outmc)
range(coda.out$statistics[, "Time-series SE"]/coda.out$statistics[, "SD"])
par(mfcol = c(1, 1),
mar = c(5.1, 5.1, 4.1, 4.1))
diff.1v2.coll <- out.coll$sims.list$beta0 -
out.coll$sims.list$beta.Cutpartial
hist(diff.1v2.coll, main = "Différence des distributions de postérieurs, \npour la probabilité d'occupation des collemboles",
xlab = "Témoin vs coupe partielle",
ylab = "Fréquence"
)
quant1v2.coll <- quantile(diff.1v2.coll, probs = c(0.025, 0.975))
abline(
v = quant1v2.coll,
lty = 2,
col = "red",
lwd = 3
)
quant1v2.coll
diff.1v3.coll <- out.coll$sims.list$beta0 -
out.coll$sims.list$beta.Cutclear
hist(diff.1v3.coll, main = "Différence des distributions de postérieurs, \npour la probabilité d'occupation des collemboles",
xlab = "Témoin vs coupe totale",
ylab = "Fréquence")
quant1v3.coll <- quantile(diff.1v3.coll, probs = c(0.025, 0.975))
abline(
v = quant1v3.coll,
lty = 2,
col = "red",
lwd = 3
)
quant1v3.coll
diff.2v3.coll <- out.coll$sims.list$beta.Cutpartial -
out.coll$sims.list$beta.Cutclear
hist(diff.2v3.coll, main = "Différence des distributions de postérieurs, \npour la probabilité d'occupation des collemboles",
xlab = "Coupe partielle vs coupe totale",
ylab = "Fréquence")
quant2v3.coll <- quantile(diff.2v3.coll, probs = c(0.025, 0.975))
abline(
v = quant2v3.coll,
lty = 2,
col = "red",
lwd = 3
)
quant2v3.coll
outSum.coll <-
out.coll$summary [, c("mean", "sd", "2.5%", "97.5%", "Rhat")]
# sample data
coll_data <- data.frame(
treatments = c("Témoin", "Coupe partielle", "Coupe totale"),
mean = c(outSum.coll[1:3, 1]),
lower = c(outSum.coll[1:3, 3]),
upper = c(outSum.coll[1:3, 4])
)
coll_data
par(mfcol = c(1, 1),
mar = c(5.1, 5.1, 4.1, 4.1))
par(mfcol = c(3, 2),
mar = c(4, 4, 4, 2))
##beta0
acf(out.coll$samples[[1]][, "beta0"],
main = "beta0 (chain 1)", cex.lab = 1.2, cex.axis = 1.2)
par(mfcol = c(2, 3),
mar = c(4, 4, 4, 2))
#beta0
hist(out.coll$sims.list$beta0,
xlab = "beta0",
main = "Posterior density")
#beta.Cutpartial
hist(out.coll$sims.list$beta.Cutpartial,
xlab = "beta.Cutpartial",
main = "Posterior density")
#beta.Cutclear
hist(out.coll$sims.list$beta.Cutclear,
xlab = "beta.Cutclear",
main = "Posterior density")
hist(out.coll$sims.list$sigma[, 1],
xlab = "sigma[1]",
main = "Posterior density")
hist(out.coll$sims.list$sigma[, 2],
xlab = "sigma[2]",
main = "Posterior density")
hist(out.coll$sims.list$sigma[, 3],
xlab = "sigma[3]",
main = "Posterior density")
##check diagnostics
res <- out.coll$summary[paste("res[", 1:nsites, "]", sep = ""), "mean"]
res.pearson <- out.coll$summary[paste("res.pearson[", 1:nsites, "]", sep = ""), "mean"]
pred <- out.coll$summary[paste("pred[", 1:nsites, "]", sep = ""), "mean"]
qqnorm(res)
qqline(res)
##raw residuals - evidence of heteroskedasticity
plot(res ~ pred)
##Pearson standardized residuals suggest variance differs across groups
plot(res.pearson ~ pred)
outSum.coll <-
out.coll$summary [, c("mean", "sd", "2.5%", "97.5%", "Rhat")]
outSum.coll
# sample data
coll_data <- data.frame(
treatments = c("Control", "Partial-Cut", "Clear Cut"),
mean = c(outSum.coll[1:3, 1]),
lower = c(outSum.coll[1:3, 3]),
upper = c(outSum.coll[1:3, 4])
)
coll_data
par(mar = c(5.1, 5.1, 4.1, 4.1))
# Create a  plot
plot(
NA,
xlim = c(0, 4),
ylim = c(-15, 40),
main = "Collemboles",
xlab = "Coupes forestières",
ylab = "Biomasse",
xaxt = "n",
cex.axis = 1,
cex.lab = 1)
# Add lines for each treatment
segments(
x0 = 1:3,
y0 = coll_data$lower,
1:3,
coll_data$upper,
col = "black",
lwd = 2
)
# Add points for mean occupation probabilities
points(
x = 1:3,
y = coll_data$mean,
pch = 19,
col = "black",
lwd = 4
)
axis(1, at = 1:3, labels = coll_data$treatments, lwd = 1, padj = 0.5)
par(par(mfcol = c(2, 3),
# Create a  plot
plot(
NA,
xlim = c(0, 4),
ylim = c(-15, 40),
main = "Collemboles",
xlab = "Coupes forestières",
ylab = "Biomasse",
xaxt = "n",
cex.axis = 1,
cex.lab = 1)
par(mfcol = c(1, 1),
# Create a  plot
plot(
NA,
xlim = c(0, 4),
ylim = c(-15, 40),
main = "Collemboles",
xlab = "Coupes forestières",
ylab = "Biomasse",
xaxt = "n",
cex.axis = 1,
cex.lab = 1)
par(mfcol = c(1, 1),
mar = c(5.1, 5.1, 4.1, 4.1))
# Create a  plot
plot(
NA,
xlim = c(0, 4),
ylim = c(-15, 40),
main = "Collemboles",
xlab = "Coupes forestières",
ylab = "Biomasse",
xaxt = "n",
cex.axis = 1,
cex.lab = 1)
# Add lines for each treatment
segments(
x0 = 1:3,
y0 = coll_data$lower,
1:3,
coll_data$upper,
col = "black",
lwd = 2
)
# Add points for mean occupation probabilities
points(
x = 1:3,
y = coll_data$mean,
pch = 19,
col = "black",
lwd = 4
)
setwd("~/Documents/Maitrise/Memoire")
setwd("~/Documents/Maitrise/Memoire")
##load clean file
load(file = "SEM_data_JAGS.RData")
##load clean file
load(file = "SEM_data_JAGS.RData")
str(data.JAGS)
##salamander data
y.sal <- as.matrix(data.JAGS$pcin[, -1])
##salamander data
y.sal <- as.matrix(data.JAGS$pcin[, -1])
##salamander data
y.sal <- as.matrix(data.JAGS$pcin[, -1])
dimnames(y.sal) <- NULL
##carab competitor
y.car.comp <- as.matrix(data.JAGS$car_comp[, -1])
dimnames(y.car.comp) <- NULL
##carab prey
y.car.prey <- as.matrix(data.JAGS$car_prey[, -1])
dimnames(y.car.prey) <- NULL
##collembola
y.coll <- data.JAGS$coll$weight
##occupancy variables
Coupe <- data.JAGS$Obs_cov$Coupe
##detection variables
CWD <- data.JAGS$Obs_cov$CWD_STD
data.JAGS$Obs_cov$CWD_tot_m3
Precip <- as.matrix(data.JAGS$precip[, -1])
dimnames(Precip) <- NULL
BlockOrig <- data.JAGS$Obs_cov$Bloc
##convert to numeric variable
Block <- as.numeric(BlockOrig)
##other info
nsites <- nrow(y.sal)
nvisits <- ncol(y.sal)
nblocks <- length(unique(Block))
ngroups <- length(unique(Coupe))
## named list
linData <- list(y.sal = y.sal,
y.car.comp = y.car.comp,
y.car.prey = y.car.prey,
y.coll = y.coll,
nsites = nsites,
nvisits = nvisits,
ngroups = ngroups,
CWD = CWD,
Canopy = data.JAGS$Obs_cov$canopy/100,
Litter = data.JAGS$Obs_cov$litter,
Precip = Precip,
Group = ifelse(Coupe == "temoin", 1,
ifelse(Coupe == "partielle", 2,
3)),
Cutpartial = ifelse(data.JAGS$Obs_cov$Coupe == "partielle", 1, 0),
Cutclear = ifelse(data.JAGS$Obs_cov$Coupe == "totale", 1, 0),
Block = Block, nblocks = 4)
str(linData)
## use known occupied values
zstartSal <- apply(y.sal, 1, max)
zstartSal
##carab prey
zstartCar.prey <- apply(y.car.prey, 1, max)
zstartCar.prey
##carab competitor
zstartCar.comp <- apply(y.car.comp, 1, max)
zstartCar.comp
## function to assign initial values at each iteration
inits <- function(){
list(beta0.cwd = rnorm(1),
beta.Cutpartial.cwd = rnorm(1),
beta.Cutclear.cwd = rnorm(1),
alpha.block.cwd = rnorm(nblocks),
sigma.block.cwd = runif(1, 0, 10),
sigma.cwd = runif(3, 0, 10),
beta0.can = rnorm(1),
beta.Cutpartial.can = rnorm(1),
beta.Cutclear.can = rnorm(1),
alpha.block.can = rnorm(nblocks),
sigma.block.can = runif(1, 0, 10),
sigma.can = runif(3, 0, 10),
beta0.lit = rnorm(1),
beta.Cutpartial.lit = rnorm(1),
beta.Cutclear.lit = rnorm(1),
alpha.block.lit = rnorm(nblocks),
sigma.block.lit = runif(1, 0, 10),
sigma.lit = runif(1, 0, 10),
z.sal = zstartSal,
psi.sal = runif(ngroups, 0, 1),
alpha0.sal = rnorm(1),
alpha.precip.sal = rnorm(1),
alpha.cwd.sal = rnorm(1),
alpha.block.sal = rnorm(nblocks),
sigma.block.sal = runif(1, 0, 10),
z.car.comp = zstartCar.comp,
psi.car.comp = runif(3, 0, 1),
alpha0.car.comp = rnorm(1),
alpha.precip.car.comp = rnorm(1),
alpha.cwd.car.comp = rnorm(1),
alpha.block.car.comp = rnorm(nblocks),
sigma.block.car.comp = runif(1, 0, 10),
z.car.prey = zstartCar.prey,
psi.beta0.car.prey = rnorm(1),
psi.beta.z.sal.car.prey = rnorm(1),
psi.beta.Cutpartial.car.prey = rnorm(1),
psi.beta.Cutclear.car.prey = rnorm(1),
alpha0.car.prey = rnorm(1),
alpha.precip.car.prey = rnorm(1),
alpha.cwd.car.prey = rnorm(1),
alpha.block.car.prey = rnorm(nblocks),
sigma.block.car.prey = runif(1, 0, 10),
beta0.coll = rnorm(1),
beta.Cutpartial.coll = rnorm(1),
beta.Cutclear.coll = rnorm(1),
beta.z.sal.coll = rnorm(1),
beta.z.car.prey.coll = rnorm(1),
beta.z.car.comp.coll = rnorm(1),
alpha.block.coll = rnorm(nblocks),
sigma.block.coll = runif(1, 0, 10),
sigma.coll = runif(3, 0, 10))
}
zstartSal
##carab prey
zstartCar.prey <- apply(y.car.prey, 1, max)
zstartCar.prey
##carab competitor
zstartCar.comp <- apply(y.car.comp, 1, max)
zstartCar.comp
## vector of names
params <- c("beta0.cwd",
"beta.Cutpartial.cwd",
"beta.Cutclear.cwd",
"alpha.block.cwd",
"sigma.block.cwd",
"sigma.cwd",
"res.pearson.cwd",
"beta0.can",
"beta.Cutpartial.can",
"beta.Cutclear.can",
"alpha.block.can",
"sigma.block.can",
"sigma.can",
"res.pearson.can",
"beta0.lit",
"beta.Cutpartial.lit",
"beta.Cutclear.lit",
"alpha.block.lit",
"sigma.block.lit",
"sigma.lit",
"res.pearson.lit",
"psi.sal",
"alpha0.sal", "alpha.precip.sal",
"alpha.cwd.sal",
"alpha.block.sal", "sigma.block.sal",
"finiteOcc.sal",
"psi.car.comp",
"alpha0.car.comp", "alpha.precip.car.comp",
"alpha.cwd.car.comp",
"alpha.block.car.comp", "sigma.block.car.comp",
"finiteOcc.car.comp",
"psi.beta0.car.prey", "psi.beta.z.sal.car.prey",
"psi.beta.Cutpartial.car.prey", "psi.beta.Cutclear.car.prey",
"alpha0.car.prey", "alpha.precip.car.prey",
"alpha.cwd.car.prey",
"alpha.block.car.prey", "sigma.block.car.prey",
"finiteOcc.car.prey",
"beta0.coll",
"beta.Cutpartial.coll",
"beta.Cutclear.coll",
"beta.z.sal.coll",
"beta.z.car.prey.coll",
"beta.z.car.comp.coll",
"alpha.block.coll",
"sigma.block.coll",
"sigma.coll",
"res.pearson")
## MCMC settings
## chains
nc <- 5
## iterations
ni <- 200000
## burn-in
nb <- 750000
## thinning rate (save 1 obs per 5 iterations)
nt <- 5
library(jagsUI)
out.jags <- jags(data = linData,
inits = inits,
parameters = params,
model = "SEM6.jags",
n.thin = nt,
n.chains = nc,
n.burnin = nb,
n.iter = ni)#,
## burn-in
nb <- 75000
## thinning rate (save 1 obs per 5 iterations)
nt <- 5
library(jagsUI)
out.jags <- jags(data = linData,
inits = inits,
parameters = params,
model = "SEM6.jags",
n.thin = nt,
n.chains = nc,
n.burnin = nb,
n.iter = ni)#,
save(out.jags, file = "out.jags.sem6.Rdata")
##check output
print(out.jags, 3)
round(out.jags$summary[, c("mean", "sd", "2.5%", "97.5%", "n.eff")], 2)
round(out.jags$summary[c("beta0.cwd",
"beta.Cutpartial.cwd",
"beta.Cutclear.cwd",
"sigma.block.cwd",
#"sigma.cwd",
"beta0.can",
"beta.Cutpartial.can",
"beta.Cutclear.can",
"sigma.block.can",
#"sigma.can",
"beta0.lit",
"beta.Cutpartial.lit",
"beta.Cutclear.lit",
"sigma.block.lit",
"sigma.lit",
"psi.sal[1]",
"psi.sal[2]",
"psi.sal[3]",
"alpha0.sal", "alpha.precip.sal",
"alpha.cwd.sal",
"sigma.block.sal",
"finiteOcc.sal",
"psi.car.comp[1]", "psi.car.comp[3]", "psi.car.comp[3]",
"alpha0.car.comp", "alpha.precip.car.comp",
"alpha.cwd.car.comp",
"sigma.block.car.comp",
"finiteOcc.car.comp",
"psi.beta0.car.prey", "psi.beta.z.sal.car.prey",
"psi.beta.Cutpartial.car.prey", "psi.beta.Cutclear.car.prey",
"alpha0.car.prey", "alpha.precip.car.prey",
"alpha.cwd.car.prey",
"sigma.block.car.prey",
"finiteOcc.car.prey",
"beta0.coll",
"beta.Cutpartial.coll",
"beta.Cutclear.coll",
"beta.z.sal.coll",
"beta.z.car.prey.coll",
"beta.z.car.comp.coll",
"sigma.block.coll"),
c("mean", "sd", "2.5%", "97.5%", "n.eff")], 2)
##check for Rhat > 1
any(out.jags$summary[, "Rhat"] > 1.1)
which(out.jags$summary[, "Rhat"] > 1.1)
