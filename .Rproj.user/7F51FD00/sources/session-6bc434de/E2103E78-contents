#positionnement
setwd(dir = "/Users/williamdevos/Documents/Maitrise/Data")

## importation des données

biomass<- read.csv("coll_biomass.csv", header = TRUE, stringsAsFactors = TRUE, sep = ";")

## importation variable de site
Obs_cov<- read.csv("ObsCov.csv", header = TRUE, stringsAsFactors = TRUE)


coll.data.JAGS<- list(biomass = biomass,
                     Obs_cov = Obs_cov)

save(coll.data.JAGS, file = "coll_data_JAGS.RData")

load(file = "coll_data_JAGS.RData")
str(coll.data.JAGS)

hist(coll.data.JAGS$biomass$weight)

# version 1

## Analyses

# JAGS - biomass x cutting treatments

#collembola biomass 
Biomasse<- coll.data.JAGS$biomass$weight


# #standardisation
# Biomasse<-as.matrix(Biomasse$weight)
# BioM_mean <- mean(Biomasse, na.rm = TRUE)
# BioM_sd <- sd(Biomasse, na.rm = TRUE)
# BioM_std <- as.data.frame((Biomasse - BioM_mean)/BioM_sd)

#occupancy variable
Coupe<-coll.data.JAGS$Obs_cov$Coupe


# transform cutting treatment in binary
Cutpartial<- ifelse(Coupe == "partielle", 1, 0)
Cutclear<- ifelse(Coupe == "totale", 1, 0)

# nsites
nsites<- nrow(Biomasse)
#ngroups<-length(unique(Coupe$traitements))

# model biomass ~ dnorm()
modelstring <- "
model {
  ## Priors
  beta0 ~ dnorm(0, 0.01)
  beta.Cutpartial ~ dnorm(0, 0.01)
  beta.Cutclear ~ dnorm(0, 0.01)

  tau <- pow(sigma, -2)
  sigma ~ dunif(0, 70)

  ## Likelihood
  for (i in 1:nsites) {
     mu[i] <- beta0 + beta.Cutpartial*Cutpartial[i] + beta.Cutclear*Cutclear[i]
     Biomasse[i] ~ dnorm(mu[i], tau)
  }


}
"
writeLines(modelstring, con = "Coll_BioMasse_Cut.jags")

# # model biomass ~ dlnorm()
# modelstring <- "
# model {
#   ## Priors
#   beta0 ~ dnorm(0, 0.01)
#   beta.Cutcontrol ~ dnorm(0, 0.01)
#   beta.Cutpartial ~ dnorm(0, 0.01)
#   beta.Cutclear ~ dnorm(0, 0.01)
#   
#   tau <- pow(sigma, -2)
#   sigma ~ dunif(0, 10)
#  
#   ## Likelihood
#   for (i in 1:nsites) {
#      mu[i] <- beta0 + beta.Cutcontrol*Cutcontrol[i] +
#                    beta.Cutpartial*Cutpartial[i] + 
#                    beta.Cutclear*Cutclear[i]
#                     
#      Biomasse[i] ~ dlnorm(mu[i], tau)
#   }
#   
# 
# }
# "
# writeLines(modelstring, con = "Coll_BioMasse_Cut.jags")

# # model biomass ~ dlnorm()
# modelstring <- "
# model {
#   ## Priors
#   beta0 ~ dnorm(0, 0.01)
#   beta.Cutcontrol ~ dnorm(0, 0.01)
#   beta.Cutpartial ~ dnorm(0, 0.01)
#   beta.Cutclear ~ dnorm(0, 0.01)
# 
#  
#   ## Likelihood
#   for (i in 1:nsites) {
#      lambda[i] <- beta0 + beta.Cutcontrol*Cutcontrol[i] +
#                    beta.Cutpartial*Cutpartial[i] + 
#                    beta.Cutclear*Cutclear[i]
#                     
#      Biomasse[i] ~ dpois(lambda[i])
#   }
#   
# 
# }
# "
# 
# writeLines(modelstring, con = "Coll_BioMasse_Cut.jags")

# ## extract Pearson residuals
# for (i in 1:nsites) {
#   pearson.res[i] <- (Biomasse[i] - mu[i])/sqrt(mu[i])
# }



# list of data

lin.data <- list(
  Biomasse = as.numeric(as.matrix(Biomasse)),
  Cutpartial = as.numeric(Cutpartial),
  Cutclear = as.numeric(Cutclear),
  nsites = nsites
  #,ngroups = ngroups
)
#BioM_std

str(lin.data)


# initial values of intercepts
inits <- function( ){
  list(beta0 = rnorm(1),
       beta.Cutpartial = rnorm(1),
       beta.Cutcontrol = rnorm(1),
       beta.Cutclear = rnorm(1))
}


# output
params <- c("beta0", "beta.Cutcontrol", "beta.Cutpartial",
            "beta.Cutclear")

# ,"pearson.res"



## MCMC settings
## chains
nc <- 5

## iterations
ni <- 100000

## burn-in
nb<- 50000

## thinning rate (save 1 obs per 5 iterations)
nt <-5

library(jagsUI)


out.coll <- jags(data = lin.data,
                 inits = inits,
                 parameters = params,
                 model = "Coll_BioMasse_Cut.jags",
                 n.thin = nt,
                 n.chains = nc,
                 n.burnin = nb,
                 n.iter = ni,
                 n.adapt = 10000)

# save(out.coll, file = "out.coll.100K50Kb.Rdata")

load("out.coll.100K50Kb.Rdata")

out.coll$summary[c("beta0", "beta.Cutcontrol", "beta.Cutpartial",
                   "beta.Cutclear"), 
                 c("mean", "sd", "2.5%", "97.5%", "Rhat")]
##Rhat
hist(out.coll$summary[, "Rhat"])
any(out.coll$summary[, "Rhat"] > 1.1)

par(mfrow = c(2, 2), 
    mar = c(4, 4, 2, 2))

matplot(cbind(out.coll$samples[[1]][, "beta0"], 
              out.coll$samples[[2]][, "beta0"], 
              out.coll$samples[[3]][, "beta0"],
              out.coll$samples[[4]][, "beta0"],
              out.coll$samples[[5]][, "beta0"]),
        type = "l", 
        ylab = "beta0", xlab = "iteration", cex.lab = 1.2)

matplot(cbind(out.coll$samples[[1]][, "beta.Cutcontrol"], 
              out.coll$samples[[2]][, "beta.Cutcontrol"], 
              out.coll$samples[[3]][, "beta.Cutcontrol"],
              out.coll$samples[[4]][, "beta.Cutcontrol"],
              out.coll$samples[[5]][, "beta.Cutcontrol"]),
        type = "l", 
        ylab = "beta.Cutcontrol", xlab = "iteration", cex.lab = 1.2)

matplot(cbind(out.coll$samples[[1]][, "beta.Cutpartial"], 
              out.coll$samples[[2]][, "beta.Cutpartial"], 
              out.coll$samples[[3]][, "beta.Cutpartial"],
              out.coll$samples[[4]][, "beta.Cutpartial"],
              out.coll$samples[[5]][, "beta.Cutpartial"]),
        type = "l", 
        ylab = "beta.Cutpartial", xlab = "iteration", cex.lab = 1.2)

matplot(cbind(out.coll$samples[[1]][, "beta.Cutclear"], 
              out.coll$samples[[2]][, "beta.Cutclear"], 
              out.coll$samples[[3]][, "beta.Cutclear"],
              out.coll$samples[[4]][, "beta.Cutclear"],
              out.coll$samples[[5]][, "beta.Cutclear"]),
        type = "l", 
        ylab = "beta.Cutclear", xlab = "iteration", cex.lab = 1.2)


##using coda package for additional diagnostics
library(coda)
##convert to mcmc.list( ) for coda
outmc <- mcmc.list(out.coll$samples[[1]],
                   out.coll$samples[[2]],
                   out.coll$samples[[3]],
                   out.coll$samples[[4]],
                   out.coll$samples[[5]])

##save summary in object
coda.out <- summary(outmc)
range(coda.out$statistics[, "Time-series SE"]/coda.out$statistics[, "SD"])

#autocorrelation

par(mfcol = c(3, 2), 
    mar = c(4, 4, 4, 2))

##beta0
acf(out.coll$samples[[1]][, "beta0"], 
    main = "beta0 (chain 1)", cex.lab = 1.2, cex.axis = 1.2)
acf(out.coll$samples[[2]][, "beta0"], 
    main = "beta0 (chain 2)", cex.lab = 1.2, cex.axis = 1.2)
acf(out.coll$samples[[3]][, "beta0"], 
    main = "beta0 (chain 3)", cex.lab = 1.2, cex.axis = 1.2)
acf(out.coll$samples[[4]][, "beta0"], 
    main = "beta0 (chain 4)", cex.lab = 1.2, cex.axis = 1.2)
acf(out.coll$samples[[5]][, "beta0"], 
    main = "beta0 (chain 5)", cex.lab = 1.2, cex.axis = 1.2)

par(mfcol = c(3, 2), 
    mar = c(4, 4, 4, 2))

##beta.Cutpartial
acf(out.coll$samples[[1]][, "beta.Cutpartial"], 
    main = "beta.Cutpartial (chain 1)", cex.lab = 1.2, cex.axis = 1.2)
acf(out.coll$samples[[2]][, "beta.Cutpartial"], 
    main = "beta.Cutpartial (chain 2)", cex.lab = 1.2, cex.axis = 1.2)
acf(out.coll$samples[[3]][, "beta.Cutpartial"], 
    main = "beta.Cutpartial (chain 3)", cex.lab = 1.2, cex.axis = 1.2)
acf(out.coll$samples[[4]][, "beta.Cutpartial"], 
    main = "beta.Cutpartial (chain 4)", cex.lab = 1.2, cex.axis = 1.2)
acf(out.coll$samples[[5]][, "beta.Cutpartial"], 
    main = "beta.Cutpartial (chain 5)", cex.lab = 1.2, cex.axis = 1.2)

par(mfcol = c(3, 2), 
    mar = c(4, 4, 4, 2))

##beta.Cutclear
acf(out.coll$samples[[1]][, "beta.Cutclear"], 
    main = "beta.Cutclear (chain 1)", cex.lab = 1.2, cex.axis = 1.2)
acf(out.coll$samples[[2]][, "beta.Cutclear"], 
    main = "beta.Cutclear (chain 2)", cex.lab = 1.2, cex.axis = 1.2)
acf(out.coll$samples[[3]][, "beta.Cutclear"], 
    main = "beta.Cutclear (chain 3)", cex.lab = 1.2, cex.axis = 1.2)
acf(out.coll$samples[[4]][, "beta.Cutclear"], 
    main = "beta.Cutclear (chain 4)", cex.lab = 1.2, cex.axis = 1.2)
acf(out.coll$samples[[5]][, "beta.Cutclear"], 
    main = "beta.Cutclear (chain 5)", cex.lab = 1.2, cex.axis = 1.2)

#distribution des postérieur

par(mfcol = c(2, 2), 
    mar = c(4, 4, 4, 2))

#beta0
hist(out.coll$sims.list$beta0,
xlab = "beta0", 
main = "Posterior density")

#beta.Cutcontrol
hist(out.coll$sims.list$beta.Cutcontrol,
     xlab = "beta.Cutcontrol", 
     main = "Posterior density")

#beta.Cutpartial
hist(out.coll$sims.list$beta.Cutpartial,
     xlab = "beta.Cutpartial", 
     main = "Posterior density")

#beta.Cutclear
hist(out.coll$sims.list$beta.Cutclear,
     xlab = "beta.Cutclear", 
     main = "Posterior density")



## graphique

outSum.coll <-
  out.coll$summary [, c("mean", "sd", "2.5%", "97.5%", "Rhat")]

# sample data
coll_data <- data.frame(
  treatments = c("Control", "Partial-Cut", "Clear Cut"),
  mean = c(outSum.coll[2:4, 1]),
  lower = c(outSum.coll[2:4, 3]),
  upper = c(outSum.coll[2:4, 4])
)

coll_data

par(mfcol = c(1, 1), 
    mar = c(4.5, 4.5, 4, 2))

# Create a  plot
plot(
  NA,
  xlim = c(0, 4),
  ylim = c(-15, 40),
  main = "Comparison of biomass \nbetween different cutting treatments",
  xlab = "Treatments",
  ylab = "Biomass",
  xaxt = "n",
  cex.axis = 1.5,
  cex.lab = 1.5)

# Add lines for each treatment
segments(
  x0 = 1:3,
  y0 = coll_data$lower,
  1:3,
  coll_data$upper,
  col = "black",
  lwd = 2
)

# Add points for mean occupation probabilities
points(
  x = 1:3,
  y = coll_data$mean,
  pch = 19,
  col = "black",
  lwd = 4
)

axis(1, at = 1:3, labels = coll_data$treatments, lwd = 1, padj = 0.5)
